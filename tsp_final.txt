#include <stdio.h>
#include <stdlib.h>

int path[20];
int n;
int g(int k, int v[], int c[][20]);
void trvpath(int k, int v[], int c[][20], int j);

int main()
{
    int mcost;
    path[0] = 0;  // Start at the first city (0-indexed)
    
    printf("Enter value of N: \n");
    scanf("%d", &n);
    
    int c[20][20]; // Adjacency matrix, max size assumed 20x20
    int v[n];
    int j = 1;

    for (int i = 0; i < n; i++) {
        v[i] = 0;
    }
    path[n] = 0; // Return to the start city
    
    printf("Enter Array Elements (Adjacency Matrix): \n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &c[i][j]);
        }
    }
    
    printf("Adjacency Matrix: \n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) { 
            printf("%d\t", c[i][j]);
        } 
        printf("\n");
    }

    v[0] = 1; // Mark the first city as visited
    mcost = g(0, v, c); // Start from the first city

    for (int i = 0; i < n; i++) {
        v[i] = 0;
    }
    v[0] = 1;

    trvpath(0, v, c, j);
    
    printf("Minimum cost is: %d\n", mcost);
    printf("Path: ");
    for (int i = 0; i <= n; i++) {
        printf("%d ", path[i] + 1); // +1 to print in 1-based indexing for readability
    }
    printf("\n");

    return 0;
}

int g(int k, int v[], int c[][20])
{
    int min = 999, temp, flag = 0;
    for (int i = 1; i < n; i++) {
        if (v[i] == 0) {
            flag = 1;
            break;
        }
    }
    
    if (flag == 0) {
        return c[k][0]; // Return cost to start city
    }

    for (int i = 1; i < n; i++) {
        if (v[i] == 0) {
            v[i] = 1;
            temp = c[k][i] + g(i, v, c);
            if (temp < min) {
                min = temp;
            }
            v[i] = 0;
        }
    }
    return min;
}

void trvpath(int k, int v[], int c[][20], int j)
{
    int temp, min = 999, t;
    int v1[n];

    if (j < n) {
        for (int i = 1; i < n; i++) {
            if (v[i] == 0) {
                v[i] = 1;
                temp = c[k][i] + g(i, v, c);
                if (temp < min) {
                    min = temp;
                    t = i;
                    for (int x = 0; x < n; x++) {
                        v1[x] = v[x];
                    }
                }
                v[i] = 0;
            }
        }
        path[j] = t;
        trvpath(t, v1, c, j + 1);
    }
}